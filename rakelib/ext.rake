class ExtensionTask < Rake::TaskLib

  def initialize name, dir
    define name, dir
  end


  private

  def needs_regeneration? source, bundle
    return true unless File.exists? bundle
    return true unless File.mtime(bundle) > File.mtime(source)
    return true if on_macruby? && ext_platform(bundle) == :mri
    return true if on_mri?     && ext_platform(bundle) == :macruby
  end

  def ext_platform bundle
    `otool -L #{bundle}`.match(/MacRuby/) ? :macruby : :mri
  end

  def define name, dir
    namespace :compile do
      desc "Compile the #{name} C extension"
      task name do
        ext = "#{dir}/#{name}"
        if needs_regeneration? "#{ext}.c", "#{ext}.bundle"
          Rake::Task["clobber_#{name}_ext"].execute
          Dir.chdir(dir) do
            ruby 'extconf.rb'
            sh   'make'
          end
          cp "#{ext}.bundle", "lib/accessibility/#{name}/"
        end
      end
    end
    task :compile => "compile:#{name}"

    clobber_task = "clobber_#{name}_ext"
    desc "Remove files generated by compiling #{name}"
    task clobber_task do
      Dir.glob("{lib,ext}/**/#{name}{.bundle,.o}").each do |file|
        $stdout.puts "rm #{file}"
        rm_f file
      end
      file = "#{dir}/Makefile"
      $stdout.puts "rm #{file}"
      rm_f file
    end
    task :clobber => clobber_task
  end

end


ExtensionTask.new 'bridge',      'ext/accessibility/bridge'
ExtensionTask.new 'core',        'ext/accessibility/core'
ExtensionTask.new 'extras',      'ext/accessibility/extras'
ExtensionTask.new 'highlighter', 'ext/accessibility/highlighter'


if on_macruby?
  require 'rake/compiletask'
  Rake::CompileTask.new
end

